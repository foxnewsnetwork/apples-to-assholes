// Generated by CoffeeScript 1.3.3
(function() {
  var Game, apples_to_assholes, methodMap, socket, sync_machine,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'delete': 'DELETE',
    'read': 'GET'
  };

  sync_machine = {
    socketio: function(method, model, options) {
      var callback, eventname, params;
      if (!model.name) {
        throw "You must specify a model name error " + (JSON.stringify(model));
      }
      eventname = ("" + model.name + " " + method + " up") || options["eventname"];
      if (typeof socket === "undefined" || socket === null) {
        throw "Socket.IO is currently not working ERROR";
      }
      params = {
        eventname: eventname,
        socketid: socket.id
      };
      if (options.data == null) {
        if (model.serialize != null) {
          params["data"] = model.serialize();
        } else {
          params["data"] = model.toJSON();
        }
      }
      if (options["callback"] != null) {
        callback = options["callback"];
        delete options["callback"];
        return socket.emit(eventname, _.extend(options, params), callback);
      } else {
        return socket.emit(eventname, _.extend(options, params));
      }
    },
    ajax: function(method, model, options) {
      var params, temp_data, type;
      type = methodMap[method];
      params = {
        type: type,
        dataType: 'json'
      };
      if (!options.url) {
        params.url = model.url || (function() {
          throw "URL ERROR " + (JSON.stringify(model));
        })();
      }
      if (!options.data && model && (method === 'create' || method === 'update')) {
        params.contentType = 'application/json';
        temp_data = {
          "authenticity_token": $("meta[name='csrf-token']").attr("content")
        };
        if (model.name == null) {
          throw "You Must Specifiy a Model Name Error " + (JSON.stringify(model));
        }
        if (model.serialize != null) {
          temp_data[model.name] = model.serialize();
        }
        if (model.serialize == null) {
          temp_data[model.name] = model.toJSON();
        }
        params.data = JSON.stringify(temp_data);
      }
      if (Backbone.emulateJSON) {
        params.contentType = 'application/x-www-form-urlencoded';
        params.data = params.data ? {
          model: params.data
        } : {};
      }
      if (Backbone.emulateHTTP) {
        if (type === 'PUT' || type === 'DELETE') {
          if (Backbone.emulateJSON) {
            params.data._method = type;
            params.type = 'POST';
            params.beforeSend = function(xhr) {
              xhr.setRequestHeader('X-HTTP-Method-Override', type);
            };
          }
        }
      }
      if (params.type !== 'GET' && !Backbone.emulateJSON) {
        params.processData = false;
      }
      return $.ajax(_.extend(params, options));
    }
  };

  Backbone.sync = function(method, model, options) {
    options || (options = {});
    switch (options["protocolStyle"]) {
      case "socketio":
        return sync_machine.socketio(method, model, options);
      default:
        return sync_machine.ajax(method, model, options);
    }
  };

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function(socket) {
      this.socket = socket;
      return this.socket.on("connection down", function(socketid) {
        return this.socketid = socketid;
      });
    };

    return Game;

  })(Backbone.Model);

  socket = io.connect("http://localhost:3123");

  apples_to_assholes = new Game(socket);

  mocha.setup("bdd");

  $("document").ready(function() {
    return mocha.globals(['apples_to_assholes']).run();
  });

  describe("Game", function() {
    describe("Sanity Test", function() {
      it("should have that thing", function() {
        return expect(Game).to.be.ok;
      });
      it("Should at least exist", function() {
        return expect(apples_to_assholes).to.be.ok;
      });
      it("Should have the proper globals", function() {
        return expect(io).to.be.ok;
      });
      return it("should have socket enabled", function() {
        return expect(socket).to.be.ok;
      });
    });
    return describe("Actual Operation", function() {
      return it("should have a proper id", function(done) {
        var _this = this;
        return setTimeout(function() {
          expect(apples_to_assholes.socketid).to.equal(socket.id);
          return done();
        }, 1950);
      });
    });
  });

}).call(this);
