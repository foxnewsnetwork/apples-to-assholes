// Generated by CoffeeScript 1.3.3
(function() {
  var Card, CardView, Cards, Flash, Game, Player, Players, Room, Rooms, Vote, Votes, apples_to_assholes, methodMap, socket, sync_machine,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'delete': 'DELETE',
    'read': 'GET'
  };

  sync_machine = {
    socketio: function(method, model, options) {
      var callback, eventname, params;
      if (!model.name) {
        throw "You must specify a model name error " + (JSON.stringify(model));
      }
      eventname = ("" + model.name + " " + method + " up") || options["eventname"];
      if (typeof socket === "undefined" || socket === null) {
        throw "Socket.IO is currently not working ERROR";
      }
      params = {
        eventname: eventname,
        socketid: socket.id
      };
      if (options.data == null) {
        if (model.serialize != null) {
          params["data"] = model.serialize();
        } else {
          params["data"] = model.toJSON();
        }
      }
      if (options["callback"] != null) {
        callback = options["callback"];
        delete options["callback"];
        return socket.emit(eventname, _.extend(options, params), callback);
      } else {
        return socket.emit(eventname, _.extend(options, params));
      }
    },
    ajax: function(method, model, options) {
      var params, temp_data, type;
      type = methodMap[method];
      params = {
        type: type,
        dataType: 'json'
      };
      if (!options.url) {
        params.url = model.url || (function() {
          throw "URL ERROR " + (JSON.stringify(model));
        })();
      }
      if (!options.data && model && (method === 'create' || method === 'update')) {
        params.contentType = 'application/json';
        temp_data = {
          "authenticity_token": $("meta[name='csrf-token']").attr("content")
        };
        if (model.name == null) {
          throw "You Must Specifiy a Model Name Error " + (JSON.stringify(model));
        }
        if (model.serialize != null) {
          temp_data[model.name] = model.serialize();
        }
        if (model.serialize == null) {
          temp_data[model.name] = model.toJSON();
        }
        params.data = JSON.stringify(temp_data);
      }
      if (Backbone.emulateJSON) {
        params.contentType = 'application/x-www-form-urlencoded';
        params.data = params.data ? {
          model: params.data
        } : {};
      }
      if (Backbone.emulateHTTP) {
        if (type === 'PUT' || type === 'DELETE') {
          if (Backbone.emulateJSON) {
            params.data._method = type;
            params.type = 'POST';
            params.beforeSend = function(xhr) {
              xhr.setRequestHeader('X-HTTP-Method-Override', type);
            };
          }
        }
      }
      if (params.type !== 'GET' && !Backbone.emulateJSON) {
        params.processData = false;
      }
      return $.ajax(_.extend(params, options));
    }
  };

  Backbone.sync = function(method, model, options) {
    options || (options = {});
    switch (options["protocolStyle"]) {
      case "socketio":
        return sync_machine.socketio(method, model, options);
      default:
        return sync_machine.ajax(method, model, options);
    }
  };

  Card = (function(_super) {

    __extends(Card, _super);

    function Card() {
      return Card.__super__.constructor.apply(this, arguments);
    }

    Card.count = 0;

    Card.prototype.defaults = {
      category: null,
      content: null,
      image: null
    };

    Card.random = function(options) {
      var data;
      if (options == null) {
        options = {
          "category": "white"
        };
      }
      data = {
        "category": options["category"]
      };
      switch (options["category"]) {
        case "white":
          data["content"] = "Old wrinkly Dick";
          data["image"] = "http://upload.wikimedia.org/wikipedia/commons/thumb/8/88/46_Dick_Cheney_3x4.jpg/220px-46_Dick_Cheney_3x4.jpg";
          break;
        case "black":
          data["content"] = "Trevor thinks of _____________ every night before going to bed.";
          break;
        default:
          throw "Nonexistant category error";
      }
      return new Card(data);
    };

    Card.prototype.initialize = function() {
      Card.count += 1;
      this.view = new CardView({
        model: this
      });
      return this.view.render();
    };

    return Card;

  })(Backbone.Model);

  Player = (function(_super) {

    __extends(Player, _super);

    function Player() {
      return Player.__super__.constructor.apply(this, arguments);
    }

    Player.prototype.initialize = function(cards) {
      return this.cards = Cards.random({
        "category": "white",
        "limit": 10
      });
    };

    return Player;

  })(Backbone.Model);

  Room = (function(_super) {

    __extends(Room, _super);

    function Room() {
      return Room.__super__.constructor.apply(this, arguments);
    }

    Room.prototype.initialize = function() {
      var _this = this;
      Backbone.Events.on("game:start", function() {
        _this.black = Card.random({
          "category": "black"
        });
        _this.whites = new Cards();
        _this.player = new Player();
        return _this.white_timer = null;
      });
      return Backbone.Events.on("card:white", function(card) {
        _this.whites.add(card);
        if (_this.white_timer == null) {
          return _this.white_timer = setTimeout(function() {
            return Backbone.Events.trigger("game:start");
          }, 15000);
        }
      });
    };

    return Room;

  })(Backbone.Model);

  Vote = (function(_super) {

    __extends(Vote, _super);

    function Vote() {
      return Vote.__super__.constructor.apply(this, arguments);
    }

    return Vote;

  })(Backbone.Model);

  Cards = (function(_super) {

    __extends(Cards, _super);

    function Cards() {
      return Cards.__super__.constructor.apply(this, arguments);
    }

    Cards.prototype.model = Card;

    Cards.random = function(options) {
      var card, cards, k, _i, _ref;
      if (options == null) {
        options = {
          category: "white",
          limit: 1
        };
      }
      cards = new Cards();
      for (k = _i = 1, _ref = options["limit"]; 1 <= _ref ? _i <= _ref : _i >= _ref; k = 1 <= _ref ? ++_i : --_i) {
        card = Card.random(options);
        cards.add(card);
      }
      return cards;
    };

    return Cards;

  })(Backbone.Collection);

  Players = (function(_super) {

    __extends(Players, _super);

    function Players() {
      return Players.__super__.constructor.apply(this, arguments);
    }

    Players.prototype.model = Player;

    return Players;

  })(Backbone.Collection);

  Rooms = (function(_super) {

    __extends(Rooms, _super);

    function Rooms() {
      return Rooms.__super__.constructor.apply(this, arguments);
    }

    Rooms.prototype.model = Room;

    return Rooms;

  })(Backbone.Collection);

  Votes = (function(_super) {

    __extends(Votes, _super);

    function Votes() {
      return Votes.__super__.constructor.apply(this, arguments);
    }

    Votes.prototype.model = Vote;

    return Votes;

  })(Backbone.Collection);

  CardView = (function(_super) {

    __extends(CardView, _super);

    function CardView() {
      return CardView.__super__.constructor.apply(this, arguments);
    }

    CardView.prototype.tagName = "div";

    CardView.prototype.className = "card";

    CardView.prototype.text = _.template("<p class='card-contents'><%= content %></p>");

    CardView.prototype.image = _.template("<img src='<%= image %>' class='img-circle img-card' />");

    CardView.prototype.container = $("body");

    CardView.prototype.has_image = false;

    CardView.prototype.events = {
      "click": "interact",
      "mouseenter": "swap2img",
      "mouseleave": "swap2txt"
    };

    CardView.prototype.render = function() {
      if (this.model == null) {
        throw "Calling View Without a Model Error";
        return this;
      }
      this.has_image = this.model.has("image");
      $(this.el).append(this.text(this.model.toJSON()));
      $(this.el).attr("class", "card " + (this.model.get('category')) + "-card");
      this.container.append($(this.el));
      if (this.has_image) {
        $(this.el).append(this.image(this.model.toJSON()));
        return this.$("img").hide();
      }
    };

    CardView.prototype.interact = function() {
      return false;
    };

    CardView.prototype.swap2txt = function() {
      if (this.has_image) {
        this.$("p").show();
        this.$("img").hide();
      }
      return false;
    };

    CardView.prototype.swap2img = function() {
      if (this.has_image) {
        this.$("img").show();
        this.$("p").hide();
      }
      return false;
    };

    return CardView;

  })(Backbone.View);

  Flash = (function(_super) {

    __extends(Flash, _super);

    function Flash() {
      return Flash.__super__.constructor.apply(this, arguments);
    }

    Flash.container = (function() {
      $("body").append("<ul id='flash-container' class='flash-container'></ul>");
      return $("#flash-container");
    })();

    Flash.show = function(content, color) {
      var data;
      data = {
        content: content,
        color: color ? color : "info"
      };
      return (new Flash()).render(data);
    };

    Flash.prototype.tagName = "li";

    Flash.prototype.className = "alert alert-block";

    Flash.prototype.events = {
      "mouseover .alert": "diffusify",
      "mouseleave .alert": "focusify"
    };

    Flash.prototype.render = function(data) {
      if (data['color'] != null) {
        $(this.el).attr("class", "" + this.className + " alert-" + data['color']);
      }
      $(this.el).html(data['content']);
      Flash.container.append($(this.el));
      setTimeout((function(dom) {
        return (function() {
          dom.$(dom.el).hide(1000);
          return dom.remove();
        });
      })(this), 5000);
      return this;
    };

    Flash.prototype.diffusify = function(e) {
      return $(this.el).css("opacity", 0.5);
    };

    Flash.prototype.focusify = function(e) {
      return $(this.el).css("opacity", 1);
    };

    return Flash;

  })(Backbone.View);

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.routes = {
      ":name": "room_switch"
    };

    Game.prototype.initialize = function(socket) {
      this.socket = socket;
      this.room = new Room();
      return Backbone.Events.trigger("game:start");
    };

    return Game;

  })(Backbone.Router);

  socket = io.connect("http://localhost:3123");

  apples_to_assholes = new Game(socket);

  mocha.setup("bdd");

  $("document").ready(function() {
    return mocha.globals(['apples_to_assholes']).run();
  });

  describe("Game Router", function() {
    describe("Sanity Test", function() {
      it("should have that thing", function() {
        return expect(Game).to.be.ok;
      });
      it("Should at least exist", function() {
        return expect(apples_to_assholes).to.be.ok;
      });
      it("Should have the proper globals", function() {
        return expect(io).to.be.ok;
      });
      return it("should have socket enabled", function() {
        return expect(socket).to.be.ok;
      });
    });
    return describe("Actual Operation", function() {
      it("should properly be in a room", function(done) {
        var _this = this;
        return setTimeout(function() {
          expect(apples_to_assholes.room).to.be.ok;
          return done();
        }, 1950);
      });
      return it("should have a hand", function(done) {
        var _this = this;
        return setTimeout(function() {
          expect(apples_to_assholes.room.player.cards.length).to.equal(10);
          return done();
        }, 1950);
      });
    });
  });

  describe("Card Model", function() {
    describe("Sanity test", function() {
      return it("should exist", function() {
        return expect(Card).to.be.ok;
      });
    });
    return describe("Card Count", function() {
      return it("have some counts", function(done) {
        return setTimeout(function() {
          expect(Card.count > 0).to.equal(true);
          return done();
        }, 1950);
      });
    });
  });

  describe("Room Model", function() {
    return describe("Sanity test", function() {
      return it("should exist", function() {
        return expect(Room).to.be.ok;
      });
    });
  });

}).call(this);
