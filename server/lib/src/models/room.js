// Generated by CoffeeScript 1.3.3
(function() {
  var Room,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Room = (function(_super) {

    __extends(Room, _super);

    function Room() {
      return Room.__super__.constructor.apply(this, arguments);
    }

    Room.white_card_time = 15000;

    Room.vote_time = 15000;

    Room.starting_hand = 10;

    Room.prototype.defaults = {
      state: "pre-game",
      name: "default",
      start_vote: function() {
        return Backbone.Events.trigger("stuff");
      },
      announce_winner: function() {
        return Backbone.Events.trigger("stuff");
      },
      pass_whites: function() {
        return Backbone.Events.trigger("stuff");
      },
      pass_blacks: function() {
        return Backbone.Events.trigger("stuff");
      }
    };

    Room.prototype.initialize = function() {
      return this.counter = 0;
    };

    Room.prototype.join = function(data) {
      if (data == null) {
        data = {};
      }
      if (this.counter === 0) {
        this.start_game();
      }
      this.counter += 1;
      return _.extend(data, {
        cards: Cards.retrieve({
          limit: Room.starting_hand,
          category: "white"
        })
      });
    };

    Room.prototype.start_game = function() {
      var black, white;
      this.set("state", "black-card", {
        silent: true
      });
      white = Cards.retrieve({
        limit: this.counter,
        category: "white"
      });
      this.get("pass_whites")(white);
      black = Cards.retrieve({
        limit: 1,
        category: "black"
      });
      return this.get("pass_blacks")(black);
    };

    Room.prototype.leave = function(data) {
      this.counter -= 1;
      if (this.counter === 0) {
        if (this.white_timer != null) {
          clearTimeout(this.white_timer);
        }
        if (this.vote_timer != null) {
          clearTimeout(this.vote_timer);
        }
        if (this.post_game_timer != null) {
          clearTimeout(this.post_game_timer);
        }
        this.destroy();
      }
      return data;
    };

    Room.prototype.white_card = function(data) {
      var _this = this;
      switch (this.get("state")) {
        case "black-card":
          this.white_timer = setTimeout((function() {
            return _this.start_vote();
          }), Room.white_card_time);
          this.set("state", "white-card", {
            silent: true
          });
          return data;
        case "white-card":
          return data;
        default:
          return null;
      }
    };

    Room.prototype.start_vote = function() {
      this.set("state", "vote", {
        silent: true
      });
      return this.get("start_vote")();
    };

    Room.prototype.vote = function(data) {
      var _this = this;
      switch (this.get("state")) {
        case "vote":
          this.vote_timer = setTimeout((function() {
            return _this.announce_winner();
          }), Room.vote_time);
          this.set("state", "vote-counting", {
            silent: true
          });
          return data;
        case "vote-counting":
          return data;
        default:
          return null;
      }
    };

    Room.prototype.announce_winner = function() {
      var _this = this;
      this.set("state", "post-game", {
        silent: true
      });
      this.get("announce_winner")();
      return this.post_game_timer = setTimeout((function() {
        return _this.start_game();
      }), 2000);
    };

    return Room;

  })(Backbone.Model);

}).call(this);
